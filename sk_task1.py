# -*- coding: utf-8 -*-
"""SK_Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kZc6rlkj68LoKow4zseIbd5hgnJT3H8i
"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the CSV files
df_population = pd.read_csv('API_SP.POP.TOTL_DS2_en_csv_v2_31753.csv', skiprows=4)
df_metadata_country = pd.read_csv('Metadata_Country_API_SP.POP.TOTL_DS2_en_csv_v2_31753.csv')

# Set the latest year (2023)
latest_year = '2023'

# Step 1: Bar Chart for Top 10 Most Populous Countries in 2023
# --------------------------------------------------------------
# Filter the population data for the latest year and drop missing values
df_population_latest = df_population[['Country Name', latest_year]].dropna()

# Sort the data by population to get the top 10 countries for visualization
df_population_latest = df_population_latest.sort_values(by=latest_year, ascending=False).head(10)

# Plotting the bar chart
plt.figure(figsize=(10, 6))
plt.bar(df_population_latest['Country Name'], df_population_latest[latest_year].astype(int), color='skyblue')

# Adding labels and title
plt.xlabel('Country')
plt.ylabel('Population (in billions)')
plt.title(f'Top 10 Most Populous Countries in {latest_year}')
plt.xticks(rotation=45, ha='right')

# Display the chart
plt.tight_layout()
plt.show()

# Step 2: Histogram for Population Distribution in 2023
# --------------------------------------------------------------
# Convert population values to numeric, drop missing values
df_population_histogram = df_population[[latest_year]].dropna()
df_population_histogram[latest_year] = pd.to_numeric(df_population_histogram[latest_year])

# Plotting the histogram
plt.figure(figsize=(10, 6))
plt.hist(df_population_histogram[latest_year], bins=20, color='green', edgecolor='black')

# Adding labels and title
plt.xlabel('Population')
plt.ylabel('Number of Countries')
plt.title(f'Distribution of Country Populations in {latest_year}')

# Display the chart
plt.tight_layout()
plt.show()

# Step 3: Bar Chart by Region (Using Metadata)
# --------------------------------------------------------------
# Merge population data with country metadata based on 'Country Code'
df_population_metadata = pd.merge(df_population, df_metadata_country, how='left', on='Country Code')

# Group countries by regions and calculate total population per region
df_population_region = df_population_metadata.groupby('Region')[latest_year].sum().reset_index()

# Plot population by region
plt.figure(figsize=(10, 6))
plt.bar(df_population_region['Region'], df_population_region[latest_year], color='purple')

plt.xlabel('Region')
plt.ylabel('Total Population')
plt.title('Total Population by Region in 2023')
plt.xticks(rotation=45, ha='right')

# Display the chart
plt.tight_layout()
plt.show()